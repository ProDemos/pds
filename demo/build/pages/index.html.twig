{% extends '/styleguide/index.html.twig' %}

{% block component_intro %}
    <div class="s-styleguide-content">
        <h1>Design System for ProDemos.nl</h1>

        <h2>Purpose</h2>
        <ul>
            <li>Provide a single visual source for the design elements of ProDemos.nl.</li>
            <li>Serve components and assets for the actual ProDemos.nl website to prevent code duplication.</li>
        </ul>

        <h2>Techniques</h2>
        <p>In this design system we use the following techniques:</p>
        <ul>
            <li>CSS3 build with SASS</li>
            <li>Twig 2 templates</li>
            <li>Typescript for Javascript</li>
            <li>SVGs for icons and images where possible</li>
            <li>All is build with Webpack</li>
            <li>The CSS and Javascript is build with Webpack</li>
            <li>Packages are managed with NPM</li>
            <li>The Twig templates are rendered within a Symfony 3 application</li>
            <li>The PHP application is managed with Composer</li>
            <li>All of the code is in Git version control</li>
        </ul>

        <h2>How to use this design system?</h2>

        <p>The system contains two sections, one for the components and one for assets used in these components.
        Every component provides a block of code that can be used in your project by copying and alter the classes and text to your needs.
            Classes for components are all prefixed with a 'c-'. The CSS-notation is based on the BEM-system (<a href="https://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/">https://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/</a>).</p>
        <p>To get started with the CSS, you can find the compiled source under the section 'Source-files'</p>

        <h3>Brand</h3>
        <p>Here you can find the logo's of ProDemos when they are added.</p>

        <h3>Buttons</h3>
        <p>List of all kind of buttons used throughout the project. Every button starts with a class (c-btn) that contains the shared behaviour. Beside that there is a class to describe the primary or secondary style, and there are style to describe the theme, which primarily consists of colors for the default, hover, and focus states. If you want a button to be present but not yet clickable, just add the disabled class provided in the example.
            The buttons with an icon contain an extra container with the SVG-code. Just choose a button that fits best to your situation, copy the code and alter to your needs.</p>

        <h3>Forms</h3>
        <p>Input components are a bit simpler than buttons. Just add the default input class (c-input), add the specific class for the type of input (c-input--text) and a theme-class (t-corporate). Just as with buttons they can be disabled too, just add the class 'c-input--disabled'.</p>

        <h3>Tables</h3>
        <p>There are two types of tables styled: responsive and non responsive. It's up to the layout of the page and the use of the table to decide which one to use.
            Because tables are far to complex to catch them in a component, you should inspect the table and gather it's classnames. Take a good look at the role- and data-attributes, they are an important part of the responsive behaviour, so don't forget them.</p>


        <h2>Design elements</h2>
        <p>The section Design Elements contains the colors, icons and basic typography.</p>

        <h3>Colors</h3>
        <p>Use the named color, this will help for consistency and to remember which color to use (you can remember blue--deep-sky, but #00b4e6 is much hard).
        Color names can be rendered with: <a href="https://www.color-blindness.com/color-name-hue/" target="_blank" rel="noopener noreferrer">https://www.color-blindness.com/color-name-hue/</a><br>
            pattern: <i>[hue--color-name]</i><br>
        If a color contains it's hue in the name, leave the hue in the color name behind, for example:<br>
        <pre>#2A3FC9 gives 'blue--cerulean-blue', but becomes: 'blue--cerulean'</pre></p>

        <h3>Icons</h3>
        <p>The icons for buttons are based on SVG with a canvas size of 24 x 24, and when you create new icons the line art is preferably max 22 x 22 px. If you stick to these numbers the icons will render consistently. Copy the SVG-code and alter just the width and height to your need when using it in your project. They are scalable, so you can make them larger than the default 24 x 24.
            The icons that can be used as graphical element on the background are default 48 x 48 px.</p>

        <h3>Typography</h3>
        <p>The provided example of the text styling is based on use inside a container which has the class 's-cms-content'.
            If you need the style of a single element you can inspect the element and gather the properties.</p>

        <h2>Sass</h2>
        <p>Little notes on the use of the Sass-files when adding styles</p>
        <p>The variables are defined by scales, which helps in consistency for sizings and layout. A scale can be accessed like an array, so when the font-size scale contains multiple value's, you can access one by:</p>
        <pre>
$type-scale: 56px 44px 32px 24px 22px 18px 16px 14px 12px;<br>
.class {
    font-size: nth($type-scale, 2); // second in the array, gives 44px
}
        </pre>

        <h4>Breakpoints</h4>
        <p>When breakpoints are defined, they can be used inline in the class to target specific behaviour.<br>Just use:<br>
        <pre>
@include media-from(lg) {
    font-size: nth($type-scale, 2);
}
        </pre> to set another style from breakpoint LG (LarGe, probably something around 1024px)</p>
        <p>
            Three types can be used:<br>
        <pre>@include media-from(lg){ ... }</pre>
        Which means: 'Use this style up from Large screens'
        <pre>@include media-between(md, lg) { ... }</pre>
        Which means: 'use this style between Medium and Large screens'
        <pre>@include media-until(lg) { ... }</pre>
        Which means: 'use this style until Large screens'
        </p>


        <h2>Code base</h2>
        <h3>Code source</h3>
        <p>The source code of the design system is available on GitHub: https://github.com/ProDemos/design-system</p>
        <p>Use Git to fetch the source code (<code>git clone git@github.com:ProDemos/design-system.git</code>) and follow the steps in the <code>README.md</code> file to setup the project.</p>

        <h3>File structure</h3>
        <p>The elements of this Design System are all built within the <code>htmldev/</code> root folder. Within the Htmldev
            folder you will find the following structure:</p>
        <ul>
            <li><code>components/</code> &nbsp; This folder holds the Twig templates for all the style components. Each in their own subfolder. For instance buttons, brand elements or form elements. These components are to be used in the actual ProDemos.nl website.</li>
            <li><code>data/</code> &nbsp; In this folder you will find YAML files with sample data to use for rendering the components. If you need to add components/elements or new variations to the Design System, you should add an entry in a new or existing YAML file with some sample data provided.</li>
            <li><code>pages/</code> &nbsp; This folder holds the (non-default / customized) pages of this Design System. These pages are for this Design System only.</li>
            <li><code>sass/</code> &nbsp; In this folder you will find all SASS files, categorized in subfolders by their purpose. The <code>main.scss</code> file is the entry point and should contain include references to all other files only.</li>
            <li><code>src/</code> &nbsp; In this folder you will find all Javascript (Typescript) files, categorized in subfolders. The <code>main.ts</code> file is the entry point and should contain imports and initializations only.</li>
        </ul>

    </div>
{% endblock %}
