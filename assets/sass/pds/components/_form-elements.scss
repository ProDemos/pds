
// -----------------------------------------------------------------------------
//  COMPONENT .pds-c-input
// .pds-c-input[.disabled]
//  input[type=text].pds-c-input [.valid|.invalid]
//  select.pds-c-input [.fullwidth]
// .pds-c-input.container[.radio|.checkbox]
// .pds-c-input-container.radio > input[type=radio] + .pds-c-input-check + label
// .pds-c-input-container.checkbox > input[type=checkbox] + .pds-c-input-check + label
// -----------------------------------------------------------------------------


.pds-c-input-container {

    margin-bottom: nth($spacing-scale, 5);

    // Radiobutton
    &.radio {

        
        // The label
        label, .pds-c-input-label {
            display: block;
            position: relative;
            padding: nth($spacing-scale, 4) nth($spacing-scale, 6) nth($spacing-scale, 4) nth($spacing-scale, 9);
            margin: nth($spacing-scale, 4) auto;
            z-index: 2;
            cursor: pointer;
            transition: all 0.25s linear;
        }

        input[type=radio], .pds-c-input.radio {
            position: absolute;
            visibility: hidden;
        }

        // The checkable element (replaces the invisible radio-input)
        .pds-c-input-check {
            display: block;
            position: absolute;
            border: 1px solid get-color(grey--gainsboro);
            border-radius: 100%;
            background-color: get-color(grey--romance);
            height: nth($spacing-scale, 6);
            width: nth($spacing-scale, 6);
            top: nth($spacing-scale, 4);
            left: nth($spacing-scale, 5);
            z-index: 5;
            transition: border 0.25s linear;
            cursor: pointer;

            // The radio tick
            &::before {
                display: block;
                position: absolute;
                content: "";
                border-radius: 100%;
                height: nth($spacing-scale, 4);
                width: nth($spacing-scale, 4);
                top: 3px;
                left: 3px;
                margin: auto;
                transition: background 0.25s linear;
            }
        }
        
    }
    &.checkbox {
       
        // The label
        label, .c-input-label {
            display: block;
            position: relative;
            padding: nth($spacing-scale, 4) nth($spacing-scale, 6) nth($spacing-scale, 4) nth($spacing-scale, 9);
            margin: nth($spacing-scale, 4) auto;
            z-index: 2;
            cursor: pointer;
            transition: all 0.25s linear;
        }


        // The radio input itself
        input[type=checkbox],.pds-c-input.checkbox {
            position: absolute;
            visibility: hidden;
        }

        // The checkable element (replaces the invisible checkbox)
        .pds-c-input-check {
            display: block;
            position: absolute;
            border: 1px solid get-color(grey--gainsboro);
            background-color: get-color(grey--romance);
            height: nth($spacing-scale, 6);
            width: nth($spacing-scale, 6);
            top: nth($spacing-scale, 4);
            left: nth($spacing-scale, 5);
            z-index: 5;
            transition: border 0.25s linear;
            cursor: pointer;
        
            // The checkbox tick
            &::before {
                display: block;
                position: absolute;
                content: "";
                height: nth($spacing-scale, 4);
                width: nth($spacing-scale, 4);
                top: 3px;
                left: 3px;
                margin: auto;
                transition: background 0.25s linear;
            }
            
        }
    }

}


// The default label styling
.pds-c-input-label {
    margin-bottom: nth($spacing-scale, 5);
    color: get-color(black);
    font-family: $font--fira-sans;
    font-size: nth($type-scale, 7);
    font-weight: 500;
}



// Basic input styling, shared by all inputs
.pds-c-input {
    color: get-color(black);
    font-family: $font--fira-sans;
    font-size: nth($type-scale, 7);
    line-height: nth($line-height-scale, 5);
    border-radius: 0;
    background-color: get-color(grey--romance);

    /* stylelint-disable property-no-vendor-prefix */
    -webkit-appearance: none;
    /* stylelint-enable property-no-vendor-prefix */

    &.disabled {
        color: lighten(get-color(black), nth($color-lighten-scale, 5));
        background-color: lighten((get-color(grey--romance)), nth($color-lighten-scale, 1));
        cursor: not-allowed;
    }

    &[type=text], &.text {

        padding: nth($spacing-scale, 4) nth($spacing-scale, 9) nth($spacing-scale, 3) nth($spacing-scale, 6);
        border: none;
        border-bottom: 3px solid get-color(grey--romance);
        transition: border-bottom-color 150ms ease-in-out;

        

        // When the user added valid input
        &.valid {
            background-image: url("#{$pds-assets-path}/images/icons/24px/check--green.svg");
            background-position: top 13px right 15px;
            background-repeat: no-repeat;
            background-size: 24px 24px;
            border-bottom-color: get-color(green--vida-loca);
        }

        // When the user added invalid input
        &.invalid {
            background-image: url("#{$pds-assets-path}/images/icons/24px/error--red.svg");
            background-position: top 13px right 15px;
            background-repeat: no-repeat;
            background-size: 24px 24px;
            border-bottom-color: get-color(red--crimson);
        }
    }

    @at-root select#{&}, &.dropdown {
        padding: nth($spacing-scale, 4) nth($spacing-scale, 9) nth($spacing-scale, 4) nth($spacing-scale, 6);
        border: none;
        border-bottom: 2px solid get-color(transparent);
        background-image: url("#{$pds-assets-path}/images/icons/24px/arrows--dropdown.svg");
        background-position: top 13px right 15px;
        background-repeat: no-repeat;
        background-size: 24px 24px;
        cursor: pointer;
        transition: border-bottom-color 150ms ease-in-out;

        // When full width is required
        &.full-width {
            width: 100%;
        }
  
    }

    &.radio {

        // this is hidden, but only in a 
        // pds-c-input-container with a
        // visible check

    }
    &.checkbox {
        // this is hidden, but only in a 
        // pdx-c-input-container with a 
        // visible check
    }

}


// ----theming -------
      

@mixin pds-c-input-container-theme($theme : $pds-deftheme) {
    &.radio {
        input[type=radio], .pds-c-input.radio {
            &:checked ~ .pds-c-input-check {
                border: 1px solid darken((get-color(#{nth($theme, 2)})), nth($color-darken-scale, 1));

                &::before {
                    background-color: darken((get-color(#{nth($theme, 2)})), nth($color-darken-scale, 1));
                }
            }
        }
        @include hover {
            .c-input-check {
                border-color: darken((get-color(#{nth($theme, 2)})), nth($color-darken-scale, 1));
            }
        }
    }
    &.checkbox {
        input[type=checkbox], .pds-c-input.checkbox {
            &:checked ~ .pds-c-input-check {
                border: 1px solid darken((get-color(#{nth($theme, 2)})), nth($color-darken-scale, 1));
                &::before {
                    background-color: darken((get-color(#{nth($theme, 2)})), nth($color-darken-scale, 1));
                }
            }
        }
        @include hover {
            .c-input-check {
                border-color: darken((get-color(#{nth($theme, 2)})), nth($color-darken-scale, 1));
            }
        }
    }
}

@mixin pds-c-input-theme($theme : $pds-deftheme) {
    &[type=text], &.text {
        &:focus {
            border-bottom-color: darken((get-color(#{nth($theme, 2)})), nth($color-darken-scale, 1));
        }
    }
}

@mixin pds-c-select-theme($theme : $pds-deftheme) {
    &:focus,
    &:hover {
        border-bottom-color: darken((get-color(#{nth($theme, 2)})), nth($color-darken-scale, 1));
    }
}
   

.pds-c-input-container {
    @include pds-c-input-container-theme();
}

.pds-c-input {
   @include pds-c-input-theme();
}
    
select.pds-c-input, 
.pds-c-input.dropdown {
    @include pds-c-select-theme();
}


@each $theme in $prodemos-themes {

    .pds-c-input-container {
        .t-#{nth($theme,1)} &,
        &.t-#{nth($theme,1)}:not(.inherit) {
            @include pds-c-input-container-theme($theme);
        }
    }

    .pds-c-input {
        .t-#{nth($theme,1)} &,
        &.t-#{nth($theme,1)}:not(.inherit) {
            @include pds-c-input-theme($theme);
        }
    }
        
    select.pds-c-input, 
    .pds-c-input.dropdown {
        .t-#{nth($theme,1)} &, 
        &.t-#{nth($theme,1)}:not(.inherit) {
            @include pds-c-select-theme($theme);
        }
    }
}
      