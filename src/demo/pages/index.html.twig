{% extends 'base.html.twig' %}

{% block body_intro %}
    <div class="content-text">
        <h1>Design System for ProDemos.nl</h1>

        <h2>Purpose</h2>
        <ul>
            <li>Provide a single visual source for the design elements of ProDemos.nl.</li>
            <li>Serve components and assets for the actual ProDemos.nl website to prevent code duplication.</li>
        </ul>
    
        <h2>Techniques</h2>
        <p>In this design system we use the following techniques:</p>
        <ul>
            <li>CSS3 build with SASS</li>
            <li>Twig 2 templates</li>
            <li>SVGs for icons and images where possible</li>
            <li>All of the code is in Git version control</li>
        </ul>

        <h2>How to use this design system?</h2>

        <p>To include the design system in your own project, look at the 
        <a href="https://github.com/ProDemos/pds/blob/master/README.md">README.md in github</a>. The system contains two
        parts: an <code>assets</code> folder and a <code>demo</code>. You are currently reading <code>demo/html/index.html</code>.
        For your own project, you only need the assets folder; it contains css, fonts etcetera, but also Twig
        components you can reuse in your own project. It may contain Vue components later.<p>


        <p>In general,</p>

        <ul>
            <li>
                <b>Include <code>assets/css/main.css</code></b> and optionally <code>assets/css/reset.css</code>
                in your pages, or alternatively add <code>assets/sass/main.scss</code> and 
                optionally <code>assets/sass/reset.scss</code> to your workflow.
            </li>
            <li>
                <b>The css defines</b> themes (<code>pds-t-{theme}</code>),
                components (<code>pds-c-{components}</code>) and general modifiers (<code>pds-m-{modifier}</code>),
                and nothing else. It should not conflict with your own css.
            </li>
            <li>
                <b>Including assets/main.css</b> before your own css will not change anything to your design. At least
                one of the elements on your page should use one of the classes defined in the design system to 
                actually use the design system. For example, adding the 'corporate' theme 
                to your body (<code>&lt;body class="pds-t-corporate"&gt;</code>) will change the look of 
                the page.
                Including assets/reset.css before your own css will probably change your design a bit, as
                it defines font-sizes, line-heights, box-sizings and such on a global level. 
            </li>
            <li>
                <b>Themes</b> can be specified by <code>class="pds-t-{theme}"</code>. Themes will be inherited, so
                you can start with a <code>&lt;body class="pds-t-corporate"&gt;</code> to have the whole page in the corporate theme.
                The theme will mainly affect the design of components below it.</li>
            </li>
            <li>
                <b>Components</b> have a <code>class="pds-c-{component}"</code> and subcomponents may
                have classes like <code>class="pds-c-{component}-{subcomponent}"</code>. The classes may contain component
                modifiers, like 'primary' or 'disabled'; such modifiers should only mean something inside the component.
            </li>
            <li>
                <b>Modifiers</b>, with a <code>class="pds-m-{modifier}"</code>, are like inline styles, in
                that they only modify the appearance of the immediately contained content. 
                For example, <code>class="pds-m-colored red"</code> changes the (text) color of the element to red. 
            </li>
            
        </ul>

        
        
        



    </div>
{% endblock %}
