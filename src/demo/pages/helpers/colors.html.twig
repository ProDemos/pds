{% extends 'base.html.twig' %}

{% block head_title 'Colors' %}


{% block body_intro %}
    <h1 >Colors</h1>

{% endblock %}

{% block body_content %}


    <h2 >@mixin: pds-theme</h2>
    <p>
        <b><code>pds-theme($name)</code></b>
        <dl>
            <dt><code>$name</code></dt>
            <dd>
                refers to a theme name, like 'red01'.
            </dd>
        </dl>
        Changes the current theme css variables to the given theme;
        if <code>var(--pds-color-accfill)</code> would have been
        orange before calling the mixin, it may be blue after calling it.
        See design/colors for an overview of the available themes.
        <hr>
        Example:
<xmp>
h1 {
    @include pds-theme(creme01);
    color:var(--pds-color-stroke-60);
    background-color:var(--pds-color-fill-60);
}
</xmp>
    

    <h2>Css variables: pds-color-xxx</h2>
    <p>
        <b><code>pds-color-$name</code></b>
        <dl>
            <dt><code>name</code></dt>
            <dd>
                Refers to a color name, like 'blue', 'creme-40' or a theme
                property like 'fill-20'.
                See design/colors for an overview of the available color names.
                The 'theme' colors depend on the current theme. 
                Available theme properties are 
                <code>fill</code>,<code>stroke</code>,
                <code>accfill</code> and <code>accstroke</code>
            </dd>
        </dl>

        <hr>
        Example:
<xmp>
h1 {
    color:var(--pds-color-stroke);
    background-color:var(--pds-color-creme-40);
}
</xmp>
    
        <hr>
        <code>$pds-colors</code> is defined as a map, like 
<xmp>
$pds-colors: (
    black-110: #000,
    black-80: #333, 
);
</xmp>
        You can override these css variables in your own design,
        or you can add your own colors, when configuring settings.css
<xmp>
use "...path-to-pds/sass/settings.scss" with ( 
    $pds-assets-path: "...path-to-pds",
    $pds-custom-colors: (
        black-80: #444,
        flirt: #B30069
    )
);

...

p {
    background-color: var(--pds-color-flirt);
}
</xmp>

        <code>$pds-themes</code> is also defined as a map, like 
<xmp>
$pds-themes: (
    blue01 : (
        fill: map-get($pds-colors,'blue'),
        fill-120: map.get($pds-colors,'blue-120'),
        fill-110: map.get($pds-colors,'blue-120'),
        fill-80: map.get($pds-colors,'blue-110'),
        ...
        accfill: map-get($pds-colors,'orange'),
        accfill-120: map.get($pds-colors,'orange-120'),
        accfill-110: map.get($pds-colors,'orange-110'),
        ...
        stroke: map-get($pds-colors,'white'),
        accstroke: map-get($pds-colors,'white') 
    ),
    orange01: (
        ...
    )
    ...
)
</xmp>
        You can override the css variables in your own design,
        or you can add your own themes when configuring settings.scss.
    </p>



{% endblock %}

