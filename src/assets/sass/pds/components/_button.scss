@use "../../helpers/hover";
@use "../../helpers/size";
@use "../../settings";

// -----------------------------------------------------------------------------
//  COMPONENT .pds-c-button
// .pds-c-button[ .primary | .secondary ]
// .pds-c-button[ .large | .regular |.small ]
// .pds-c-button[ .accent | .disabled ]
// .pds-c-button[ .toggle | .transparent ]
// .pds-c-button > pds-c.button-label
// .pds-c-button > .pds-c-button-content > [ i.pds-c-button-icon .{name} + ] .pds-c-button-label[ .left | .right ]  [ + i.pds-c-button-icon .{name} ] 
// .pds-c-button > .pds-c-button-content > [ svg.pds-c-button-icon + ] .pds-c-button-label[ .left | .right ]  [ + svg.pds-c-button-icon ] 
// -----------------------------------------------------------------------------


.pds-c-button {
    position: relative;
    display: inline-block;
    padding: size.pds-spacing(s) size.pds-spacing(default); // 16px 20px
    font-family: settings.$pds-font-sans;
    font-size: size.pds-fontsize(m);
    font-weight: 500;
    line-height: 1.5;
    text-decoration: none;
    border: none;
    transition: all 100ms ease-in-out;
    cursor: pointer;
    
    &.full-width {
        width:100%;
    }

    &.primary {

        margin-left: 10px;

        &::before,
        &::after {
            content: "";
            position: absolute;
            transition: all 100ms ease-in-out;
            z-index: 0;
        }

        &::before {
            width: 10px;
            height: 100%;
            bottom: -5px;
            left: -10px;
            transform: skewY(-45deg);
        }

        &::after {
            width: 100%;
            height: 10px;
            bottom: -10px;
            left: -5px;
            transform: skewX(-45deg);
        }

        // Hover styles, but only when the button is not disabled
        /* stylelint-disable max-nesting-depth */
        
        // libsass<3.6 has a regression issue with this:
        // https://github.com/sass/node-sass/issues/2330

        &:not(.disabled,:disabled) {
            @include hover.hover {
                transform: translate(-2px, 2px);
                &::before {
                    width: 8px;
                    height: 100%;
                    bottom: -5px;
                    left: -8px;
                }

                &::after {
                    width: 100%;
                    height: 8px;
                    bottom: -8px;
                    left: -5px;
                }
            }
        }
        
        
        &:active:not(.disabled,:disabled) {

            transform: translate(-5px, 5px);

            &::before {
                width: 6px;
                height: 100%;
                bottom: -3px;
                left: -6px;
            }

            &::after {
                width: 100%;
                height: 6px;
                bottom: -6px;
                left: -3px;
            }
            
        }

        /* stylelint-enable max-nesting-depth */
    }


    &.large {
        padding: size.pds-spacing(s) size.pds-spacing(default); // 16px 20px
        font-size: size.pds-fontsize(m);
    }



    &.regular {
        padding: size.pds-spacing(xs) size.pds-spacing(s); // 12px 16px
        font-size: size.pds-fontsize(default);
        .pds-c-button-icon { font-size:1.11em; }
    }



    &.small {
        padding: size.pds-spacing(xxs) size.pds-spacing(xs); // 8px 12px
        font-size: size.pds-fontsize(s);
        .pds-c-button-icon { font-size:1.25em; }
    }



    &.toggle {
        width: 100%;
        padding: size.pds-spacing(xxs)  size.pds-spacing(xs); // 8px 12px
        font-size: size.pds-fontsize(s);
        text-align: center;
        border-style: solid;
        border-width: 2px;
        &.on {
            color:var(--pds-color-accstroke);
            background-color:var(--pds-color-accfill);
            border-color:var(--pds-color-accfill);
        }
    }



    &.transparent {
        padding: size.pds-spacing(xxs) 0; // 8px 0px
        font-size: size.pds-fontsize(s);
        .pds-c-button-icon { font-size: 1.625em; }
        .pds-c-button-icon:not(svg).black {
            background-color:black;
        }
    }

    // Disabled state
    &.disabled, &:disabled {
        cursor: not-allowed;
    }

    // --- Sub elements

    .pds-c-button-label {
        flex: 1 1 auto;
        text-align: center;
        .right {
            text-align: right;
        }
        .left {
            text-align: left;
        }
        
    }

    // Icon-prefix or icon-suffix

    .pds-c-button-content {

        display: flex;
        align-items: center;

        &.big {
            font-size:larger;
        }

        .pds-c-button-icon {
            display: block;
            margin-top: -1px;
        }

        .pds-c-button-label + .pds-c-button-icon  {
            margin-left: size.pds-spacing(s);
        }
        
        .pds-c-button-icon + .pds-c-button-label  {
            margin-left: size.pds-spacing(s);
        }
        

        

    }
    &.transparent  {
        .pds-c-button-content {
            .pds-c-button-label + .pds-c-button-icon  {
                margin-left: size.pds-spacing(xxs);
            }
            
            .pds-c-button-icon + .pds-c-button-label  {
                margin-left: size.pds-spacing(xxs);
            }
        }
    }


}


/* theming */


.pds-c-button {

    color: var(--pds-color-white);
    background-color: var(--pds-color-fill-110);

    .pds-c-button-icon:not(svg) { background-color: var(--pds-color-white); }
    
    @include hover.hover {
        background-color: var(--pds-color-fill-120);
    }

    &.primary {
        &::before,
        &::after {
            background-color: var(--pds-color-fill-40);
        }

        // Hover styles, but only when the button is not disabled
        &:not(.disabled, :disabled) {
            @include hover.hover {
                &.primary {
                    &::before,
                    &::after {
                        background-color: var(--pds-color-fill-60);
                    }
                }
            }
        }

        &:active:not(.disabled, :disabled) {
            &.primary {
                &::before,
                &::after {
                    background-color: var(--pds-color-fill-80);
                }
            }
        }
    }

    &.accent {
        background-color: var(--pds-color-accfill-110);

        &.primary {
            &::before,
            &::after {
                background-color: var(--pds-color-accfill-40);
            }
        }

        // Hover styles, but only when the button is not disabled
        &:not(.disabled, :disabled) {
            @include hover.hover {
                background-color: var(--pds-color-accfill-120); // ?
                &.primary {
                    &::before,
                    &::after {
                        background-color: var(--pds-color-accfill-60);
                    }
                }
            }
        }

        &:active:not(.disabled, :disabled) {
            &.primary {
                &::before,
                &::after {
                    background-color: var(--pds-color-accfill-80);
                }
            }
        }
        &.toggle {
            &.on {
                color: var(--pds-color-accstroke);
                background-color: var(--pds-color-accfill);
                border-color: var(--pds-color-accfill);
            }
        }
    }

    &.disabled, &:disabled {
        background-color: var(--pds-color-fill-40); // should be 20

        &.primary {
            &::before,
            &::after {
                background-color: var(--pds-color-fill-20); // should be 10 ..
            }
        }
    }

    &.toggle {

        color: var(--pds-color-black);
        border-color: var(--pds-color-creme);
        background-color: var(--pds-color-creme);

        .pds-c-button-icon:not(svg) { background-color: var(--pds-color-black); }

        &:not(.disabled, :disabled) {
            @include hover.hover {
                border-color: var(--pds-color-creme-120);
                background-color: var(--pds-color-creme-120);
            }
        }

        &:active:not(.disabled, :disabled) {
            color: var(--pds-color-white);
            background-color: var(--pds-color-fill-110);
            .pds-c-button-icon:not(svg) { background-color: var(--pds-color-white); }
        }

        &:focus:not(.disabled, :disabled) {
            border-color: var(--pds-color-accfill-110);
        }

        &.disabled, &:disabled {
            color: var(--pds-color-black-60); 
            .pds-c-button-icon:not(svg) {
                background-color: var(--pds-color-black-20); 
            }
        }
    }

    &.transparent {
        color: var(--pds-color-fill-120);
        background-color: var(--pds-color-transparent);
        .pds-c-button-icon:not(svg) { 
            background-color: var(--pds-color-fill-120); 
        }
    }
}








